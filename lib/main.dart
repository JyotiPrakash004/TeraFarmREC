import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'firebase_options.dart';
import 'landing_page.dart';
import 'plant_growth_analysis_page.dart'; // ðŸ‘ˆ Import the plant growth page
import 'l10n/app_localizations.dart'; // ðŸ‘ˆ Generated by Flutterâ€™s gen_l10n

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Load saved locale from SharedPreferences
  final prefs = await SharedPreferences.getInstance();
  final savedLocaleCode = prefs.getString('locale_code');
  final initialLocale =
      savedLocaleCode != null ? Locale(savedLocaleCode) : const Locale('en');

  runApp(
    ChangeNotifierProvider(
      create: (_) => LocaleProvider(initialLocale),
      child: const TeraFarmApp(),
    ),
  );
}

class LocaleProvider extends ChangeNotifier {
  Locale _locale;
  Locale get locale => _locale;

  LocaleProvider(this._locale);

  Future<void> setLocale(Locale locale) async {
    if (!AppLocalizations.supportedLocales.contains(locale)) return;
    _locale = locale;
    notifyListeners();
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('locale_code', locale.languageCode);
  }
}

class TeraFarmApp extends StatelessWidget {
  const TeraFarmApp({super.key});

  Future<void> _initializeFirebase() async {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: _initializeFirebase(),
      builder: (context, snapshot) {
        // Show splash/loading until Firebase is ready
        if (snapshot.connectionState != ConnectionState.done) {
          return const MaterialApp(
            home: Scaffold(body: Center(child: CircularProgressIndicator())),
          );
        }

        return Consumer<LocaleProvider>(
          builder: (context, localeProvider, _) {
            return MaterialApp(
              debugShowCheckedModeBanner: false,
              locale: localeProvider.locale,
              supportedLocales: AppLocalizations.supportedLocales,
              localizationsDelegates: const [
                AppLocalizations.delegate,
                GlobalMaterialLocalizations.delegate,
                GlobalWidgetsLocalizations.delegate,
                GlobalCupertinoLocalizations.delegate,
              ],
              // Optional: fallback if locale resolution fails
              localeResolutionCallback: (locale, supportedLocales) {
                if (locale == null) return supportedLocales.first;
                for (var supported in supportedLocales) {
                  if (supported.languageCode == locale.languageCode) {
                    return supported;
                  }
                }
                return supportedLocales.first;
              },
              title: 'AgriGuru',
              home: const AuthWrapper(),
              routes: {
                '/growth-analysis': (_) => const PlantGrowthAnalysisPage(),
                // add more named routes here
              },
            );
          },
        );
      },
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    // Example: Place a language switcher in your app bar
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)!.appTitle),
        actions: [_LanguagePicker()],
      ),
      body: const LandingPage(),
    );
  }
}

class _LanguagePicker extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final provider = Provider.of<LocaleProvider>(context, listen: false);
    return DropdownButton<Locale>(
      underline: const SizedBox(),
      icon: const Icon(Icons.language, color: Colors.white),
      items:
          AppLocalizations.supportedLocales.map((locale) {
            return DropdownMenuItem(
              value: locale,
              child: Text(locale.languageCode.toUpperCase()),
            );
          }).toList(),
      onChanged: (newLocale) {
        if (newLocale != null) provider.setLocale(newLocale);
      },
    );
  }
}
